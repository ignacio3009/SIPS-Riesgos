model Con_seguridad
uses "mmxprs","mmsheet","mmetc","mmjobs","mmsystem"


parameters
	M = 10000
end-parameters


declarations
	numGen = 3
	gen = 1..numGen
	numLin = 3
	lineas = 1..numLin
	numBarras = 3
	barras = 1..numBarras
	numFallas = 4
	escenarios = 0..numFallas !Escenario 0 corresponde a pre-falla. Escenario 1-6 a los escenarios post-contingencia.
	escenarios_falla = 1..numFallas
	!Parametros
	P_MIN:		array(gen) of real
	P_MAX:		array(gen) of real
	F_MAX:		array(lineas) of real
	CV: 		array(gen) of real
	CRUP: 		array(gen) of real
	CRDOWN: 	array(gen) of real
	RUP_MAX:	array(gen) of real
	RDOWN_MAX:	array(gen) of real
	D:			array(barras) of real
	A:			array(gen,escenarios) of real
	B:			array(lineas,escenarios) of real

	PROB:		array(escenarios_falla) of real

	!Variables
	p:			array(gen,escenarios) of mpvar		!potencias
	f:			array(lineas,escenarios) of mpvar
	theta:		array(barras,escenarios) of mpvar
	rup:		array(gen,escenarios) of mpvar		!reservas arriba
	rdown:		array(gen,escenarios) of mpvar		!reservas abajo
	x:			array(gen) of mpvar		!unit commitment
	xrdown:		array(gen,escenarios) of mpvar
	xrup:		array(gen,escenarios) of mpvar


	!Funcion objetivo
	Objective:	linctr
end-declarations



initialisations from 'mmsheet.excel:'+'data_3_bus.xlsx'
	A			as "noindex;AA"
    B			as "noindex;BB"
    P_MIN		as "skiph;noindex;GPMIN"
    P_MAX		as "skiph;noindex;GPMAX"
    F_MAX		as "skiph;noindex;LFMAX"
    CV			as "skiph;noindex;GCV"
    CRUP		as "skiph;noindex;GCRUP"
    CRDOWN		as "skiph;noindex;GCRDOWN"
    D			as "skiph;noindex;DPDEM"
    RUP_MAX 	as "skiph;noindex;GRUPMAX"
    RDOWN_MAX	as "skiph;noindex;GRDOWNMAX"
    PROB		as "skiph;noindex;PROB"
end-initialisations





!Minimizar costo de operación y reservas y escenarios de operación
Objective :=  sum(g in gen)(CV(g)*p(g,0)) + sum(s in escenarios_falla)(PROB(s)*(sum(g in gen)(CV(g)*p(g,s) + CRUP(g)*rup(g,s) + CRDOWN(g)*rdown(g,s))))


!Limites de Generadores
forall(s in escenarios) do
	forall(g in gen)do
		x(g) is_binary
		xrdown(g,s) is_binary
		xrup(g,s) is_binary
		!Maximos y minimos tecnicos
		p(g,0) + rup(g,s) <= P_MAX(g)*x(g)
		p(g,0) - rdown(g,s) >= P_MIN(g)*x(g)
		! Rampa máxima de reserva está condicionada a la tecnología de generación
		rup(g,s) <= RUP_MAX(g)*xrup(g,s)
		rdown(g,s) <= RDOWN_MAX(g)*xrdown(g,s)
		xrdown(g,s) + xrup(g,s) <= 1
	end-do
end-do


forall(g in gen)do
	xrdown(g,0) =0
	xrup(g,0) = 0
end-do


!Balances nodales para escenario pre y post-falla
forall(s in escenarios)do
	p(1,s) = D(1) + f(1,s) + f(3,s)
	p(2,s) + f(1,s) = D(2) + f(2,s)
	p(3,s) + f(3,s) + f(2,s) = D(3)
end-do


!Operacion en cada escenario
forall(s in escenarios)do
	forall(g in gen)do
		p(g,s) <= A(g,s)*(p(g,0)+rup(g,s)) !A(g,s) es la matriz de disponibilidad de los generadores para los s escenarios.
		p(g,s) >= A(g,s)*(p(g,0)-rdown(g,s)) !La generación post-falla está condicionada a la generación pre-falla y a las reservas disponibles.
	end-do

	! Maximo flujo por líneas (Limitación Térmica)
	forall(l in lineas)do
		f(l,s) is_free
		f(l,s) <= F_MAX(l)*B(l,s) !B(l,s) es la matriz de disponibilidad de las líneas para los s escenarios.
		f(l,s) >= -F_MAX(l)*B(l,s)!Fuerza a que el flujo sea cero en el escenario en que la línea está en situación de falla.
	end-do

	f(1,s) <= theta(1,s)-theta(2,s) + M*(1-B(1,s)) !Formulación Big-M.
	f(1,s) >= theta(1,s)-theta(2,s) - M*(1-B(1,s)) !En el caso en que la línea esté indisponible, "elimina" el acople angular entre las barras
	f(2,s) <= theta(2,s)-theta(3,s) + M*(1-B(2,s)) !Dado que la igualdad F_jk = thetha_j - thetha_k (que ocurre cuando la línea está sana)
	f(2,s) >= theta(2,s)-theta(3,s) - M*(1-B(2,s)) !se transforma en -M <= F <= M.
	f(3,s) <= theta(1,s)-theta(3,s) + M*(1-B(3,s))
	f(3,s) >= theta(1,s)-theta(3,s) - M*(1-B(3,s))

	forall(b in barras)do
		theta(b,s) is_free
	end-do
end-do



minimise(Objective)

writeln("Results Optimization:")
writeln("Costo del sistema: ", getobjval)

forall(s in escenarios) do

	forall(g in gen) do
		p_sol(g,s):=getsol(p(g,s))
		rup_sol(g,s):=getsol(rup(g,s))
		rdown_sol(g,s):=getsol(rdown(g,s))
	end-do

	forall(l in lineas) do
		f_sol(l,s):=getsol(f(l,s))
	end-do
end-do


OBJ_SOL:=getobjval

initialisations to 'mmsheet.excel:'+'res_reservas.xlsx'
	OBJ_SOL 	as "noindex;CCOST"
    p_sol 		as "noindex;PPSOL"
	f_sol 		as "noindex;LLSOL"
	rup_sol		as "noindex;RRUPSOL"
	rdown_sol	as "noindex;RRDOWNSOL"
end-initialisations

end-model
