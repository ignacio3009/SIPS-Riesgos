model corrective_scopf
! uses "mmxprs","mmetc","mmjobs","mmsystem"
uses "mmxprs","mmnl"

parameters
	M = 10000
end-parameters


declarations
	numGen = 3
	gen = 1..numGen
	numLin = 3
	lineas = 1..numLin
	numBarras = 3
	barras = 1..numBarras
	numFallas = numGen+numLin
	escenarios = 1..numFallas+1 !Escenario 0 corresponde a pre-falla. Escenario 1-6 a los escenarios post-contingencia.
	escenarios_falla = 1..numFallas

	!Parametros
	P_MIN:		array(gen) of real
	P_MAX:		array(gen) of real
	F_MAX:		array(lineas) of real
	CV: 		array(gen) of real
	CR: 		array(gen) of real
	RAMP_MAX:	array(gen) of real
	D:			array(barras) of real
	A:			array(gen,escenarios) of real
	B:			array(gen,escenarios) of real

	PROB:		array(escenarios) of real
	BAT_MIN:	array(barras) of real
	BAT_MAX:	array(barras) of real
	CBAT:		array(barras) of real

	!Variables
	p:			array(gen,escenarios) of mpvar		!potencias
	f:			array(lineas,escenarios) of mpvar
	theta:		array(barras,escenarios) of mpvar
	rup:		array(gen,escenarios) of mpvar		!reservas arriba
	rdown:		array(gen,escenarios) of mpvar		!reservas abajo
	x:			array(gen) of mpvar		!unit commitment
	xrup:		array(gen,escenarios) of mpvar
	xrdown:		array(gen,escenarios) of mpvar
	!Baterias
	bat:		array(barras,escenarios) of mpvar



	!Funcion objetivo
	Objective:	linctr
end-declarations



initializations from "matlab.mws:"
  A as "A"
  B as "B"
end-initializations


!Generadores
P_MIN ::[0,10,10]
P_MAX ::[100,150,150]
RAMP_MAX ::[100,100,100]

!Costos
CV ::[30,60,120]
CR ::[10,10,10]

!Lineas
F_MAX ::[50,100,100]

!Demanda
D ::[30,60,120]

!Probabilidades escenarios
PROB ::[1, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]

!Baterías
BAT_MIN ::[0,0,0]
BAT_MAX ::[50,50,50]
CBAT ::[150,150,150]


!Minimizar costo de operación y reservas y escenarios de operación
Objective := sum(s in escenarios)(PROB(s)*(sum(g in gen)(CR(g)*(rup(g,s)+rdown(g,s))) + sum(g in gen)(CV(g)*p(g,s)) + sum(b in barras)(CBAT(b)*bat(b,s))))


!Limites de Generadores
forall(s in escenarios)do
	forall(g in gen)do
		x(g) is_binary
		xrdown(g,s) is_binary
		xrup(g,s) is_binary

		!Maximos y minimos tecnicos
		p(g,1) + rup(g,s) <= P_MAX(g)*x(g)
		p(g,1) - rdown(g,s) >= P_MIN(g)*x(g)
		! Rampa máxima de reserva está condicionada a la tecnología de generación
		rup(g,s) <= RAMP_MAX(g)*xrup(g,s)
		rdown(g,s) <= RAMP_MAX(g)*xrdown(g,s)
		
		!Solo puede subir o aumentar generacion
		xrup(g,s) + xrdown(g,s) <= 1
	end-do
end-do


!Límites de Baterías
forall(s in escenarios)do
	forall(b in barras) do
		bat(b,s) <=BAT_MAX(b)
		bat(b,s) >=BAT_MIN(b)
	end-do
end-do


!Balances nodales para escenario pre y post-falla
forall(s in escenarios)do
	p(1,s) = D(1) + f(1,s) + f(3,s) + bat(1,s)
	p(2,s) + f(1,s) = D(2) + f(2,s) + bat(2,s)
	p(3,s) + f(3,s) + f(2,s) = D(3) + bat(3,s)
end-do


!Operacion en cada escenario
forall(s in escenarios)do
	forall(g in gen)do
		p(g,s) <= A(g,s)*(p(g,1)+rup(g,s)) !A(g,s) es la matriz de disponibilidad de los generadores para los s escenarios.
		p(g,s) >= A(g,s)*(p(g,1)-rdown(g,s)) !La generación post-falla está condicionada a la generación pre-falla y a las reservas disponibles.
	end-do

	! Maximo flujo por líneas (Limitación Térmica)
	forall(l in lineas)do
		f(l,s) is_free
		f(l,s) <= F_MAX(l)*B(l,s) !B(l,s) es la matriz de disponibilidad de las líneas para los s escenarios.
		f(l,s) >= -F_MAX(l)*B(l,s)!Fuerza a que el flujo sea cero en el escenario en que la línea está en situación de falla.
	end-do

	f(1,s) <= theta(1,s)-theta(2,s) + M*(1-B(1,s)) !Formulación Big-M.
	f(1,s) >= theta(1,s)-theta(2,s) - M*(1-B(1,s)) !En el caso en que la línea esté indisponible, "elimina" el acople angular entre las barras
	f(2,s) <= theta(2,s)-theta(3,s) + M*(1-B(2,s)) !Dado que la igualdad F_jk = thetha_j - thetha_k (que ocurre cuando la línea está sana)
	f(2,s) >= theta(2,s)-theta(3,s) - M*(1-B(2,s)) !se transforma en -M <= F <= M.
	f(3,s) <= theta(1,s)-theta(3,s) + M*(1-B(3,s))
	f(3,s) >= theta(1,s)-theta(3,s) - M*(1-B(3,s))

	forall(b in barras)do
		theta(b,s) is_free
	end-do
end-do



minimise(Objective)

writeln("Results Optimization:")
writeln("Costo del sistema: ", getobjval)



forall(s in escenarios) do

	forall(g in gen) do
		p_sol(g,s):=getsol(p(g,s))
		rup_sol(g,s):=getsol(rup(g,s))
		rdown_sol(g,s):=getsol(rdown(g,s))
	end-do

	forall(l in lineas) do
		f_sol(l,s):=getsol(f(l,s))
	end-do

	forall(b in barras) do
		bat_sol(b,s) := getsol(bat(b,s))
	end-do

end-do



OBJ_SOL:=getobjval
initialisations to "matlab.mws:"

  OBJ_SOL	as "cost"
  p_sol 	as "psol"
  f_sol		as "fsol"
  rup_sol	as "rupsol"
  rdown_sol as "rdownsol"
  bat_sol	as "batsol"

end-initialisations

end-model
